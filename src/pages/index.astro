---
import BaseLayout from '@/layouts/Base.astro';
import heroOne from '@/assets/img/home-4-image-1.jpg';
import heroTwo from '@/assets/img/home-4-image-2.jpg';
import heroThree from '@/assets/img/home-4-image-3.jpg';
import heroFour from '@/assets/img/home-4-image-4.jpg';
import heroFive from '@/assets/img/home-4-image-5.jpg';

const sections = [
  {
    id: 'branding',
    title: 'Branding',
    categories: ['Editorial', 'Typography', 'Website'],
    image: heroOne,
  },
  {
    id: 'fashion-photography',
    title: 'Fashion Photography',
    categories: ['Editorial', 'Typography', 'Website'],
    image: heroTwo,
  },
  {
    id: 'see-our-products',
    title: 'See Our Products',
    categories: ['Editorial', 'Typography', 'Website'],
    image: heroThree,
  },
  {
    id: 'app-and-digital',
    title: 'App & Digital',
    categories: ['Editorial', 'Typography', 'Website'],
    image: heroFour,
  },
  {
    id: 'branding-inspiration',
    title: 'Branding Inspiration',
    categories: ['Editorial', 'Typography', 'Website'],
    image: heroFive,
  },
];
---
<BaseLayout
  title="Parallax Showcase â€“ Struktur"
  description="A faithful Tailwind CSS recreation of the Struktur Parallax Showcase."
  variant="legacy-parallax"
>
  <div id="top" class="relative">
    <header class="pointer-events-none fixed top-0 left-0 right-0 z-20 flex items-center justify-between px-6 py-8 text-white sm:px-10 lg:px-16">
      <a
        href="#top"
        class="pointer-events-auto text-sm font-semibold uppercase tracking-[0.6em] text-white transition hover:opacity-80"
      >
        Struktur.
      </a>
      <button
        type="button"
        class="pointer-events-auto inline-flex h-10 w-10 items-center justify-center rounded-full border border-white/40 transition hover:border-white hover:bg-white/10"
        aria-label="Open navigation"
      >
        <span class="h-1.5 w-1.5 rounded-full bg-white" aria-hidden="true" />
      </button>
    </header>

    <nav class="pointer-events-none fixed bottom-16 right-6 z-20 origin-bottom-right -rotate-90 text-[0.65rem] font-semibold uppercase tracking-[0.6em] text-[#e84945] sm:right-10 lg:right-16">
      <a href="#top" class="pointer-events-auto transition hover:text-white">Back to top</a>
    </nav>

    <div class="space-y-0">
      {sections.map((section) => (
        <section
          id={section.id}
          class="relative flex min-h-screen items-stretch justify-start overflow-hidden bg-black text-white"
          data-parallax-section
        >
          <div
            class="parallax-layer"
            style={{ backgroundImage: `url(${section.image.src})` }}
            aria-hidden="true"
            data-parallax-bg
          />
          <div class="absolute inset-0 bg-black/40" aria-hidden="true" />

          <div class="relative z-10 flex w-full max-w-6xl flex-col justify-center gap-10 px-6 py-24 sm:px-10 sm:py-32 lg:px-16">
            <div class="space-y-6">
              <h2 class="text-[2.75rem] font-bold uppercase leading-none tracking-tight sm:text-[4rem] lg:text-[5.625rem]">
                {section.title}
              </h2>
              <div class="flex flex-wrap items-center gap-3 text-xs font-semibold uppercase tracking-[0.45em] sm:text-sm">
                <span class="h-px w-16 bg-white" aria-hidden="true" />
                <span class="whitespace-nowrap">
                  {section.categories.join(' / ')}
                </span>
              </div>
            </div>
          </div>
        </section>
      ))}
    </div>
  </div>
</BaseLayout>

<script is:inline>
  (() => {
    if (typeof window === 'undefined') return;
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;

    const sections = Array.from(document.querySelectorAll('[data-parallax-section]'));
    if (sections.length === 0) return;

    const updateSection = (section) => {
      const layer = section.querySelector('[data-parallax-bg]');
      if (!(layer instanceof HTMLElement)) return;
      const rect = section.getBoundingClientRect();
      const viewportHeight = window.innerHeight || 1;
      const sectionCenter = rect.top + rect.height / 2;
      const viewportCenter = viewportHeight / 2;
      const progress = (sectionCenter - viewportCenter) / viewportHeight;
      const clamped = Math.max(-1, Math.min(1, progress));
      const offset = clamped * -80;
      layer.style.setProperty('--parallax-offset', offset.toFixed(2));
    };

    const supportsObserver = 'IntersectionObserver' in window;

    if (!supportsObserver) {
      const queueUpdate = () => {
        window.requestAnimationFrame(() => {
          sections.forEach((section) => updateSection(section));
        });
      };

      window.addEventListener('scroll', queueUpdate, { passive: true });
      window.addEventListener('resize', queueUpdate);
      queueUpdate();
      return;
    }

    const activeSections = new Set();
    let raf = 0;

    const flush = () => {
      raf = 0;
      activeSections.forEach((section) => updateSection(section));
    };

    const requestTick = () => {
      if (raf !== 0) return;
      raf = window.requestAnimationFrame(flush);
    };

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            activeSections.add(entry.target);
            updateSection(entry.target);
          } else {
            activeSections.delete(entry.target);
          }
        });
        requestTick();
      },
      { threshold: [0, 0.1, 0.5, 0.9, 1] }
    );

    sections.forEach((section) => observer.observe(section));
    window.addEventListener('scroll', requestTick, { passive: true });
    window.addEventListener('resize', () => {
      activeSections.forEach((section) => updateSection(section));
    });
  })();
</script>
